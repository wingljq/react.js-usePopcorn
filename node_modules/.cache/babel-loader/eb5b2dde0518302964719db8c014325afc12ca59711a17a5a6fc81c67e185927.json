{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nexport function useMovies(query) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  useEffect(function () {\n    const controller = new AbortController();\n    async function fetchMovies() {\n      try {\n        setIsLoading(true);\n        setError('');\n        //always reset error at the begining!!\n        setError('');\n        const res = await fetch(`https://www.omdbapi.com/?i=tt3896198&apikey=${KEY}&s=${query}`, {\n          signal: controller.signal\n        });\n\n        //catch error\n        //after the error is being thrown. react will not run the below code\n        if (!res.ok) throw new Error('Something went wrong with fetching movies');\n        const data = await res.json();\n        //in React strict mode, effect will run twice, therefore when console.log(data), it will console twice\n        //but in production ,it wont happened if remove the strictmode\n        //for no movie record found\n        if (data.Response === 'False') throw new Error('Movie not found');\n        console.log(data);\n        setMovies(data.Search);\n        setError('');\n        console.log(movies); //[],still state;\n      } catch (err) {\n        console.log(err.message);\n        if (err.name !== 'AbortError') {\n          setError(err.message);\n        }\n      } finally {\n        //alway run at the end\n        setIsLoading(false);\n      }\n    }\n\n    //when query is empty, remove all movies from the array and also reset the error back to nothing\n    if (!query.length) {\n      setMovies([]);\n      setError('');\n      return;\n    }\n    handleCloseMovies();\n    fetchMovies();\n\n    //when there is query change, the controller will abort the current fetch request to prevent download unnesscary data\n    return function () {\n      controller.abort();\n    };\n  }, [query]);\n}\n_s(useMovies, \"kVn4JPqM7meh/yhRfeqsDjc0fJc=\");","map":{"version":3,"names":["useState","useEffect","useMovies","query","_s","movies","setMovies","isLoading","setIsLoading","error","setError","controller","AbortController","fetchMovies","res","fetch","KEY","signal","ok","Error","data","json","Response","console","log","Search","err","message","name","length","handleCloseMovies","abort"],"sources":["/Users/jiaqilv/Desktop/usePopcorn/src/useMovies.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport function useMovies(query){\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n    useEffect(\n        function () {\n          const controller = new AbortController();\n    \n          async function fetchMovies() {\n            try {\n              setIsLoading(true);\n              setError('');\n              //always reset error at the begining!!\n              setError('');\n              const res = await fetch(\n                `https://www.omdbapi.com/?i=tt3896198&apikey=${KEY}&s=${query}`,\n                {signal: controller.signal},\n              );\n    \n              //catch error\n              //after the error is being thrown. react will not run the below code\n              if (!res.ok)\n                throw new Error('Something went wrong with fetching movies');\n              const data = await res.json();\n              //in React strict mode, effect will run twice, therefore when console.log(data), it will console twice\n              //but in production ,it wont happened if remove the strictmode\n              //for no movie record found\n              if (data.Response === 'False') throw new Error('Movie not found');\n    \n              console.log(data);\n              setMovies(data.Search);\n              setError('');\n    \n              console.log(movies); //[],still state;\n            } catch (err) {\n              console.log(err.message);\n              if (err.name !== 'AbortError') {\n                setError(err.message);\n              }\n            } finally {\n              //alway run at the end\n              setIsLoading(false);\n            }\n          }\n    \n          //when query is empty, remove all movies from the array and also reset the error back to nothing\n          if (!query.length) {\n            setMovies([]);\n            setError('');\n            return;\n          }\n          handleCloseMovies();\n          fetchMovies();\n    \n          //when there is query change, the controller will abort the current fetch request to prevent download unnesscary data\n          return function () {\n            controller.abort();\n          };\n        },\n        [query],\n      );\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,SAASC,SAASA,CAACC,KAAK,EAAC;EAAAC,EAAA;EAC9B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpCC,SAAS,CACL,YAAY;IACV,MAAMU,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,eAAeC,WAAWA,CAAA,EAAG;MAC3B,IAAI;QACFL,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,EAAE,CAAC;QACZ;QACAA,QAAQ,CAAC,EAAE,CAAC;QACZ,MAAMI,GAAG,GAAG,MAAMC,KAAK,CACpB,+CAA8CC,GAAI,MAAKb,KAAM,EAAC,EAC/D;UAACc,MAAM,EAAEN,UAAU,CAACM;QAAM,CAC5B,CAAC;;QAED;QACA;QACA,IAAI,CAACH,GAAG,CAACI,EAAE,EACT,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;QAC9D,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;QAC7B;QACA;QACA;QACA,IAAID,IAAI,CAACE,QAAQ,KAAK,OAAO,EAAE,MAAM,IAAIH,KAAK,CAAC,iBAAiB,CAAC;QAEjEI,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;QACjBd,SAAS,CAACc,IAAI,CAACK,MAAM,CAAC;QACtBf,QAAQ,CAAC,EAAE,CAAC;QAEZa,OAAO,CAACC,GAAG,CAACnB,MAAM,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC,OAAOqB,GAAG,EAAE;QACZH,OAAO,CAACC,GAAG,CAACE,GAAG,CAACC,OAAO,CAAC;QACxB,IAAID,GAAG,CAACE,IAAI,KAAK,YAAY,EAAE;UAC7BlB,QAAQ,CAACgB,GAAG,CAACC,OAAO,CAAC;QACvB;MACF,CAAC,SAAS;QACR;QACAnB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF;;IAEA;IACA,IAAI,CAACL,KAAK,CAAC0B,MAAM,EAAE;MACjBvB,SAAS,CAAC,EAAE,CAAC;MACbI,QAAQ,CAAC,EAAE,CAAC;MACZ;IACF;IACAoB,iBAAiB,CAAC,CAAC;IACnBjB,WAAW,CAAC,CAAC;;IAEb;IACA,OAAO,YAAY;MACjBF,UAAU,CAACoB,KAAK,CAAC,CAAC;IACpB,CAAC;EACH,CAAC,EACD,CAAC5B,KAAK,CACR,CAAC;AACP;AAACC,EAAA,CA7DeF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}